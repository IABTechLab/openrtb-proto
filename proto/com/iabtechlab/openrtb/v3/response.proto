/**
 * The response object contains minimal high level attributes (e.g., reference
 * to the request ID, bid currency, etc.) and an array of seat bids, each of
 * which is a set of bids on behalf of a buyer seat.
 *
 * The individual bid references the item in the request to which it pertains
 * and buying information such as the price, a deal ID if applicable, and
 * notification URLs. The media related to a bid is conveyed via Layer-4 domain
 * objects (i.e., ad creative, markup) included in each bid.
 */
syntax = "proto2";

package com.iabtechlab.openrtb.v3;

import "com/iabtechlab/openrtb/v3/enums.proto";

/**
 * This object is the bid response object under the Openrtb root. Its id
 * attribute is a reflection of the bid request ID. The bidid attribute is an
 * optional response tracking ID for bidders. If specified, it will be available
 * for use in substitution macros placed in markup and notification URLs. At
 * least one Seatbid object is required, which contains at least one Bid for an
 * item. Other attributes are optional.
 *
 * To express a “no-bid”, the most compact option is simply to return an empty
 * response with HTTP 204. However, if the bidder wishes to convey a reason for
 * not bidding, a Response object can be returned with just a reason code in the
 * nbr attribute.
 */
message Response {
  // ID of the bid request to which this is a response; must match the
  // request.id attribute.
  optional string id = 1;

  // Bidder generated response ID to assist with logging/tracking.
  optional string bidid = 2;

  // Reason for not bidding if applicable (see List: No-Bid Reason Codes). Note
  // that while many exchanges prefer a simple HTTP 204 response to indicate a
  // no-bid, responses indicating a reason code can be useful in debugging
  // scenarios. Common values are defined in the enumeration
  // com.iabtechlab.openrtb.v3.NoBidReason.
  optional int32 nbr = 3;

  // Bid currency using ISO-4217 alpha codes.
  optional string cur = 4;

  // Allows bidder to set data in the exchange’s cookie, which can be retrieved
  // on bid requests (refer to cdata in Object: Request) if supported by the
  // exchange. The string must be in base85 cookie-safe characters.
  optional string cdata = 5;

  // Array of Seatbid objects; 1+ required if a bid is to be made. Refer to
  // Object: Seatbid.
  repeated SeatBid seatbid = 6;

  // Optional demand source specific extensions.
  extensions 100 to 9999;
}


/**
 * A bid response can contain multiple Seatbid objects, each on behalf of a
 * different buyer seat and each containing one or more individual bids. If
 * multiple items are presented in the request offer, the package attribute can
 * be used to specify if a seat is willing to accept any impressions that it can
 * win (default) or if it is interested in winning any only if it can win them
 * all as a group.
*/
message SeatBid {
  // ID of the buyer seat on whose behalf this bid is made.
  optional string seat = 1;

  // For offers with multiple items, this flag Indicates if the bidder is
  // willing to accept wins on a subset of bids or requires the full group as a
  // package, where 0 = individual wins accepted; 1 = package win or loss only.
  optional bool package = 2;

  // Array of 1+ Bid objects each related to an item. Multiple bids can relate
  // to the same item. Refer to Object: Bid.
  repeated Bid bid = 3;

  // Optional demand source specific extensions.
  extensions 100 to 9999;
}


/**
 * A Seatbid object contains one or more Bid objects, each of which relates to a
 * specific item in the bid request offer via the “item” attribute and
 * constitutes an offer to buy that item for a given price.
*/
message Bid {
  // Bidder generated bid ID to assist with logging/tracking.
  optional string id = 1;

  // ID of the item object in the related bid request; specifically item.id.
  optional string item = 2;

  // Bid price expressed as CPM although the actual transaction is for a unit
  // item only. Note that while the type indicates float, integer math is highly
  // recommended when handling currencies (e.g., BigDecimal in Java).
  optional float price = 3;

  // Reference to a deal from the bid request if this bid pertains to a private
  // marketplace deal; specifically deal.id.
  optional string deal = 4;

  // Campaign ID or other similar grouping of brand-related ads. Typically used
  // to increase the efficiency of audit processes.
  optional string cid = 5;

  // Tactic ID to enable buyers to label bids for reporting to the exchange the
  // tactic through which their bid was submitted. The specific usage and
  // meaning of the tactic ID should be communicated between buyer and exchanges
  // a priori.
  optional string tactic = 6;

  // Pending notice URL called by the exchange when a bid has been declared the
  // winner within the scope of an OpenRTB compliant supply chain (i.e., there
  // may still be non-compliant decisioning such as header bidding).
  // Substitution macros may be included.
  optional string purl = 7;

  // Billing notice URL called by the exchange when a winning bid becomes
  // billable based on exchange-specific business policy (e.g., markup
  // rendered). Substitution macros may be included.
  optional string burl = 8;

  // Loss notice URL called by the exchange when a bid is known to have been
  // lost. Substitution macros may be included. Exchange-specific policy may
  // preclude support for loss notices or the disclosure of winning clearing
  // prices resulting in ${OPENRTB_PRICE} macros being removed (i.e., replaced
  // with a zero-length string).
  optional string lurl = 9;

  // Advisory as to the number of seconds the buyer is willing to wait between
  // auction and fulfilment.
  optional uint64 exp = 10;

  // ID to enable media to be specified by reference if previously uploaded to
  // the exchange rather than including it by value in the domain objects.
  optional string mid = 11;

  // Array of Macro objects that enable bid specific values to be substituted
  // into markup; especially useful for previously uploaded media referenced via
  // the mid attribute. Refer to Object: Macro.
  repeated Macro macro = 12;

  // Layer-4 domain object structure that specifies the media to be presented if
  // the bid is won conforming to the specification and version referenced in
  // openrtb.domainspec and openrtb.domainver. For AdCOM v1.x, the objects
  // allowed here are “Ad” and any objects subordinate thereto as specified by
  // AdCOM.
  optional bytes media = 13;

  // Optional demand source specific extensions.
  extensions 100 to 9999;
}


/**
 * This object constitutes a buyer defined key/value pair used to inject dynamic
 * values into media markup. While they apply to any media markup irrespective
 * of how it is conveyed, the principle use case is for media that was uploaded
 * to the exchange prior to the transaction (e.g., pre-registered for creative
 * quality review) and referenced in bid. The full form of the macro to be
 * substituted at runtime is ${CUSTOM_KEY}, where “KEY” is the name supplied in
 * the key attribute. This ensures no conflict with standard OpenRTB macros.
 */
message Macro {
  // Name of a buyer specific macro.
  optional string key = 1;

  // Value to substitute for each instance of the macro found in markup.
  optional string value = 2;

  // Optional demand source specific extensions.
  extensions 100 to 9999;
}

