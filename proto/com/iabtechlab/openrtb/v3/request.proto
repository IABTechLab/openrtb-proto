/**
 * The request object contains minimal high level attributes (e.g., its ID, test
 * mode, auction type, maximum auction time, buyer restrictions, etc.) and
 * subordinate objects that cover the source of the request and the actual offer
 * of sale. The latter includes the item(s) being offered and any applicable
 * deals.
 *
 * There are two points in this model that interface to Layer-4 domain objects:
 * the Request object and the Item object. Domain objects included under Request
 * would include those that provide context for the overall offer. These would
 * include objects that describe the site or app, the device, the user, and
 * others. Domain objects included in an Item object would specify details about
 * the item being offered (e.g., the impression opportunity) and specifications
 * and restrictions on the media that can be associated with acceptable bids.
 */
syntax = "proto3";

package com.iabtechlab.openrtb.v3;

import "google/protobuf/any.proto";
import "com/iabtechlab/openrtb/v3/enums.proto";

/**
 * The Request object contains a globally unique bid request ID. This id
 * attribute is required as is an Item array with at least one object (i.e., at
 * least one item for sale). Other attributes establish rules and restrictions
 * that apply to all items being offered. This object also interfaces to Layer-4
 * domain objects for context such as the user, device, site or app, etc.
 */
message Request {
  // Unique ID of the bid request; provided by the exchange.
  string id = 1;

  // Indicator of test mode in which auctions are not billable, where 0 =
  // live mode, 1 = test mode.
  bool test = 2;

  // Maximum time in milliseconds the exchange allows for bids to be received
  // including Internet latency to avoid timeout. This value supersedes any a
  // priori guidance from the exchange. If an exchange acts as an intermediary,
  // it should decrease the outbound tmax value from what it received to account
  // for its latency and the additional internet hop.
  uint32 tmax = 3;

  // Auction type, where 1 = First Price, 2 = Second Price Plus. Values greater
  // than 500 can be used for exchange-specific auction types.
  AuctionType at = 4;

  // Array of accepted currencies for bids on this bid request using ISO-4217
  // alpha codes. Recommended if the exchange accepts multiple currencies. If
  // omitted, the single currency of “USD” is assumed.
  repeated string cur = 5;

  // Restriction list of buyer seats for bidding on this item. Knowledge of
  // buyer’s customers and their seat IDs must be coordinated between parties a
  // priori. Omission implies no restrictions.
  repeated string seat = 6;

  // Flag that determines the restriction interpretation of the seat array,
  // where 0 = block list, 1 = whitelist.
  bool wseat = 7;

  // Allows bidder to retrieve data set on its behalf in the exchange’s cookie
  // (refer to cdata in Object: Response) if supported by the exchange. The
  // string must be in base85 cookie-safe characters.
  string cdata = 8;

  // A Source object that provides data about the inventory source and which
  // entity makes the final decision. Refer to Object: Source.
  Source source = 9;

  // Array of Item objects (at least one) that constitute the set of goods being
  // offered for sale. Refer to Object: Item.
  repeated Item item = 10;

  // Flag to indicate if the Exchange can verify that the items offered
  // represent all of the items available in context (e.g., all impressions on a
  // web page, all video spots such as pre/mid/post roll) to support
  // road-blocking, where 0 = no, 1 = yes.
  bool package = 11;

  // Layer-4 domain object structure that provides context for the items being
  // offered conforming to the specification and version referenced in
  // openrtb.domainspec and openrtb.domainver.
  // For AdCOM v1.x, the objects allowed here all of which are optional are one
  // of the DistributionChannel subtypes (i.e., Site, App, or Dooh), User,
  // Device, Regs, Restrictions, and any objects subordinate to these as
  // specified by AdCOM.
  google.protobuf.Any context = 12;

  // Optional exchange-specific extensions.
  google.protobuf.Any ext = 100;
}


/**
 * This object carries data about the source of the transaction including the
 * unique ID of the transaction itself, source authentication information, and
 * the chain of custody.
 *
 * NOTE: Attributes ds, dsmap, cert, and digest support digitally signed bid
 * requests as defined by the Ads.cert: Signed Bid Requests specification. As
 * the Ads.cert specification is still in its BETA state, these attributes
 * should be considered to be in a similar state.
 */
message Source {
  // Transaction ID that must be common across all participants throughout the
  // entire supply chain of this transaction. This also applies across all
  // participating exchanges in a header bidding or similar publisher-centric
  // broadcast scenario.
  string tid = 1;

  // Timestamp when the request originated at the beginning of the supply chain
  // in Unix format (i.e., milliseconds since the epoch). This value must be
  // held as immutable throughout subsequent intermediaries.
  uint64 ts = 2;

  // Digital signature used to authenticate the origin of this request computed
  // by the publisher or its trusted agent from a digest string composed of a
  // set of immutable attributes found in the bid request. Refer to Section
  // “Inventory Authentication” for more details.
  string ds = 3;

  // An ordered list of identifiers that indicates the attributes used to create
  // the digest. This map provides the essential instructions for recreating the
  // digest from the bid request, which is a necessary step in validating the
  // digital signature in the ds attribute. Refer to Section “Inventory
  // Authentication” for more details.
  string dsmap = 4;

  // File name of the certificate (i.e., the public key) used to generate the
  // digital signature in the ds attribute. Refer to Section “Inventory
  // Authentication” for more details.
  string cert = 5;

  // The full digest string that was signed to produce the digital signature.
  // Refer to Section “Inventory Authentication” for more details.
  // NOTE: This is only intended for debugging purposes as needed. It is not
  // intended for normal Production traffic due to the bandwidth impact.
  string digest = 6;

  // Payment ID chain string containing embedded syntax described in the TAG
  // Payment ID Protocol.
  // NOTE: Authentication features in this Source object combined with the
  // “ads.txt” specification may lead to the deprecation of this attribute.
  string pchain = 7;

  // Optional exchange-specific extensions.
  google.protobuf.Any ext = 100;
}


/**
 * This object represents a unit of goods being offered for sale either on the
 * open market or in relation to a private marketplace deal. The id attribute is
 * required since there may be multiple items being offered in the same bid
 * request and bids must reference the specific item of interest. This object
 * interfaces to Layer-4 domain objects for deeper specification of the item
 * being offered (e.g., an impression).
 */
message Item {
  // A unique identifier for this item within the context of the offer
  // (typically starts with “1” and increments).
  string id = 1;

  // The number of instances (i.e., “quantity”) of this item being offered
  // (e.g., multiple identical impressions in a digital out-of-home scenario).
  uint32 qty = 2;

  // If multiple items are offered in the same bid request, the sequence number
  // allows for the coordinated delivery.
  uint32 seq = 3;

  // Minimum bid price for this item expressed in CPM.
  float flr = 4;

  // Currency of the flr attribute specified using ISO-4217 alpha codes.
  string flrcur = 5;

  // Advisory as to the number of seconds that may elapse between auction and
  // fulfilment.
  uint64 exp = 6;

  // Timestamp when the item is expected to be fulfilled (e.g. when a DOOH
  // impression will be displayed) in Unix format (i.e., milliseconds since the
  // epoch).
  uint64 dt = 7;

  // Item (e.g., an Ad object) delivery method required, where 0 = either
  // method, 1 = the item must be sent as part of the transaction (e.g., by
  // value in the bid itself, fetched by URL included in the bid), and 2 = an
  // item previously uploaded to the exchange must be referenced by its ID. Note
  // that if an exchange does not supported prior upload, then the default of 0
  // is effectively the same as 1 since there can be no items to reference.
  ItemDeliveryMethod dlvy = 8;

  // An array of Metric objects. Refer to Object: Metric.
  repeated Metric metric = 9;

  // Array of Deal objects that convey special terms applicable to this item.
  // Refer to Object: Deal.
  repeated Deal deal = 10;

  // Indicator of auction eligibility to seats named in Deal objects, where 0 =
  // all bids are accepted, 1 = bids are restricted to the deals specified and
  // the terms thereof.
  bool private = 11;

  // Layer-4 domain object structure that provides specifies the item being
  // offered conforming to the specification and version referenced in
  // openrtb.domainspec and openrtb.domainver.
  // For AdCOM v1.x, the objects allowed here are Placement and any objects
  // subordinate to these as specified by AdCOM.
  google.protobuf.Any spec = 12;

  // Optional exchange-specific extensions.
  google.protobuf.Any ext = 100;
}


/**
 * This object constitutes a specific deal that was struck a priori between
 * a seller and a buyer. Its presence indicates that this item is available
 * under the terms of that deal.
 */
message Deal {
  // A unique identifier for the deal.
  string id = 1;

  // Minimum deal price for this item expressed in CPM.
  float flr = 2;

  // Currency of the flr attribute specified using ISO-4217 alpha codes.
  string flrcur = 3;

  // Optional override of the overall auction type of the request, where 1 =
  // First Price, 2 = Second Price Plus, 3 = the value passed in flr is the
  // agreed upon deal price. Additional auction types can be defined by the
  // exchange using 500+ values.
  AuctionType at = 4;

  // Whitelist of buyer seats allowed to bid on this deal. IDs of seats and the
  // buyer’s customers to which they refer must be coordinated between bidders
  // and the exchange a priori. Omission implies no restrictions.
  repeated string wseat = 5;

  // Array of advertiser domains (e.g., advertiser.com) allowed to bid on this
  // deal. Omission implies no restrictions.
  repeated string wadomain = 6;

  // Optional exchange-specific extensions.
  google.protobuf.Any ext = 100;
}


/**
 * This object is associated with an item as an array of metrics. These metrics
 * can offer insight to assist with decisioning such as average recent
 * viewability, click-through rate, etc. Each metric is identified by its type,
 * reports the value of the metric, and optionally identifies the source or
 * vendor measuring the value.
 */
message Metric {
  // Type of metric being presented using exchange curated string names which
  // should be published to bidders a priori.
  string type = 1;

  // Number representing the value of the metric. Probabilities must be in the
  // range 0.0 – 1.0.
  float value = 2;

  // Source of the value using exchange curated string names which should be
  // published to bidders a priori. If the exchange itself is the source versus
  // a third party, “EXCHANGE” is recommended.
  string vendor = 3;

  // Optional exchange-specific extensions.
  google.protobuf.Any ext = 100;
}

